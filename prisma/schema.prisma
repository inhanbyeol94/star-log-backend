// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum platform {
  KAKAO
  GOOGLE
  NAVER
  APPLE
}

model Member {
  id            String         @id @default(uuid())
  socialId      String         @map("social_id")
  email         String?        @db.VarChar()
  nickname      String?        @db.VarChar()
  phoneNumber   String?        @map("phone_number") @db.VarChar()
  profileImage  String         @map("profile_image") @db.VarChar()
  platform      platform
  blackList     Boolean        @default(false) @map("black_list")
  globalAccess  Boolean        @default(true) @map("global_access")
  isAdmin       Boolean        @default(false) @map("is_admin")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime?      @updatedAt @map("updated_at")
  deletedAt     DateTime?      @map("deleted_at")
  authHistories AuthHistory[]
  bannedMembers BannedMember[]
  blog          Blog?
  comments      Comment[]
}

enum action {
  REQUEST
  FAIL
  SUCCESS
  LOGOUT
}

model AuthHistory {
  id        Int       @id @default(autoincrement())
  memberId  String    @map("member_id")
  ip        String    @db.VarChar()
  country   String    @db.VarChar()
  action    action
  detail    String    @db.VarChar()
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  member    Member    @relation(fields: [memberId], references: [id])
}

model BannedMember {
  id        Int       @id @default(autoincrement())
  memberId  String    @map("member_id")
  reason    String    @db.VarChar()
  limitedAt DateTime  @map("limited_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  member    Member    @relation(fields: [memberId], references: [id])
}

model Blog {
  id          Int        @id @default(autoincrement())
  memberId    String     @unique @map("member_id")
  address     String     @db.VarChar()
  title       String     @db.VarChar()
  description String     @db.VarChar()
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime?  @updatedAt @map("updated_at")
  deletedAt   DateTime?  @map("deleted_at")
  member      Member     @relation(fields: [memberId], references: [id])
  tags        Tag[]
  Document    Document[]
}

model Tag {
  id        Int        @id @default(autoincrement())
  blogId    Int        @map("blog_id")
  name      String     @db.VarChar()
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime?  @updatedAt @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")
  documents Document[] @relation("join:documentAndTag")
  Blog      Blog       @relation(fields: [blogId], references: [id])
}

model Document {
  id            Int       @id @default(autoincrement())
  title         String    @db.VarChar()
  content       String
  allowComments Boolean   @map("allow_comments")
  allowPublic   Boolean   @map("allow_public")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")
  Blog          Blog      @relation(fields: [blogId], references: [id])
  tags          Tag[]     @relation("join:documentAndTag")
  comments      Comment[]
  blogId        Int
}

model Comment {
  id          Int       @id @default(autoincrement())
  documentId  Int       @map("document_id")
  memberId    String    @map("member_id")
  content     String    @db.VarChar()
  allowPublic Boolean   @map("allow_public")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  member      Member    @relation(fields: [memberId], references: [id])
  document    Document  @relation(fields: [documentId], references: [id])
}
